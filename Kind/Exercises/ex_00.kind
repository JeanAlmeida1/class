// Basic Exercises involving Bools

// type Bool {
//  true
//  false
//}

// Negation
// Returns the opposite of a Bool
//neg(b: Bool): Bool 
//  case b {
//    true:false
//    false:true
//}
//test:_
//  neg(true)

//  ?n

// And
// Returns true if both inputs are true
//and(a: Bool, b: Bool): Bool
//  case a {
//    true: case b {
//            true:true
//            false:false
//          }
//    false: false
//  }

//test:_
//  and(true, false)

//    false: case b {
//             true: false
//             false: false
//          }
// se já vai retornar false nos 2 casos acima, posso já escrever direto, ainda
// que funcione da mesma forma
// false:false


//  ?a

// Or
// Returs true if any input is true

//r(a: Bool, b: Bool): Bool
//  case a {
//    true: case b{
//            true:true
//            false:true
//          }   eu posso fazer assim, mas ambos vão retornar true, então não
//          preciso abrir o case b

//  case a{
//    true: true
//    false: case b{
//             true:true
//             false:false
//          }
//  }
  
//test:_
//  r(false, false) 

// Equal
// Returs true if both inputs are identical
eql(a: Bool, b: Bool): Bool
//  ?e

  case a {
    true: case b {
            true:true
            false:false
          }
    false: case b {
             true:false
             false:true
           }
  }

test:_
  eql(false,false)
  
// favela venceu

