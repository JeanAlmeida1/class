// Basic Exercises involving Pairs


// type = polimórfico, pode assumir qualquer tipo (nat, bool etc)
// fst: first, snd: second

type Pair <A: Type, B: Type> {
  new(fst: A, snd: B)
}

// Example:
// Swaps the elements of a pair
//swap<A: Type, B: Type>(pair: Pair<A,B>): Pair<B,A>
//  case pair {
//    new: Pair.new<B, A>(pair.snd, pair.fst)
//  }

// Returns the first element of a pair
//first<A: Type, B: Type>(pair: Pair<A,B>): A
//  ?a
// Par só tem dois elementos, o fst e o snd. Pra retornar o primeiro elemento é
// bem simples
//  case pair {
//    new:pair.fst
//  }
 
//ex_02:_
//  first!!(Pair.new!!("batatinha", true))

// usa-se ! para poder inferir o tipo

// Returns the second element of a pair
//second<A: Type, B: Type>(pair: Pair<A,B>): B
//  ?a
//  case pair {
//    new:pair.snd
//  }

//ex_02:_
//  second!!(Pair.new!!("batatinha", true))


// Declarando a função incremento para testar o exercício abaixo
inc(a: Nat): Nat
  case a {
    zero: Nat.succ(0)
    succ: Nat.succ(a)
  }

// Applies a function to both elements of a Pair
map<A: Type, B: Type>(fn: A -> B, pair: Pair<A,A>): Pair<B,B>
//  ?a
  case pair {
    new: Pair.new<B,B>(fn(pair.fst), fn(pair.snd)) 
  }
ex_02:_
  map!!(inc, Pair.new!!(1,3))

    
 


